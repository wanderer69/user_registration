// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=mocks.go -package=auth
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	entity "github.com/wanderer69/user_registration/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockuserRepository is a mock of userRepository interface.
type MockuserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepositoryMockRecorder
}

// MockuserRepositoryMockRecorder is the mock recorder for MockuserRepository.
type MockuserRepositoryMockRecorder struct {
	mock *MockuserRepository
}

// NewMockuserRepository creates a new mock instance.
func NewMockuserRepository(ctrl *gomock.Controller) *MockuserRepository {
	mock := &MockuserRepository{ctrl: ctrl}
	mock.recorder = &MockuserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepository) EXPECT() *MockuserRepositoryMockRecorder {
	return m.recorder
}

// ConfirmationUpdate mocks base method.
func (m *MockuserRepository) ConfirmationUpdate(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmationUpdate", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmationUpdate indicates an expected call of ConfirmationUpdate.
func (mr *MockuserRepositoryMockRecorder) ConfirmationUpdate(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmationUpdate", reflect.TypeOf((*MockuserRepository)(nil).ConfirmationUpdate), ctx, user)
}

// Create mocks base method.
func (m *MockuserRepository) Create(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockuserRepositoryMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockuserRepository)(nil).Create), ctx, user)
}

// DeleteByUUID mocks base method.
func (m *MockuserRepository) DeleteByUUID(ctx context.Context, userUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUUID", ctx, userUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUUID indicates an expected call of DeleteByUUID.
func (mr *MockuserRepositoryMockRecorder) DeleteByUUID(ctx, userUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUUID", reflect.TypeOf((*MockuserRepository)(nil).DeleteByUUID), ctx, userUUID)
}

// GetByEmail mocks base method.
func (m *MockuserRepository) GetByEmail(ctx context.Context, email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockuserRepositoryMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockuserRepository)(nil).GetByEmail), ctx, email)
}

// GetByLogin mocks base method.
func (m *MockuserRepository) GetByLogin(ctx context.Context, login string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", ctx, login)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockuserRepositoryMockRecorder) GetByLogin(ctx, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockuserRepository)(nil).GetByLogin), ctx, login)
}

// GetByRegistrationCode mocks base method.
func (m *MockuserRepository) GetByRegistrationCode(ctx context.Context, code string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRegistrationCode", ctx, code)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRegistrationCode indicates an expected call of GetByRegistrationCode.
func (mr *MockuserRepositoryMockRecorder) GetByRegistrationCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRegistrationCode", reflect.TypeOf((*MockuserRepository)(nil).GetByRegistrationCode), ctx, code)
}

// GetByUUID mocks base method.
func (m *MockuserRepository) GetByUUID(ctx context.Context, uuid string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUUID", ctx, uuid)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUUID indicates an expected call of GetByUUID.
func (mr *MockuserRepositoryMockRecorder) GetByUUID(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUUID", reflect.TypeOf((*MockuserRepository)(nil).GetByUUID), ctx, uuid)
}

// Update mocks base method.
func (m *MockuserRepository) Update(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockuserRepositoryMockRecorder) Update(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockuserRepository)(nil).Update), ctx, user)
}

// MockmailService is a mock of mailService interface.
type MockmailService struct {
	ctrl     *gomock.Controller
	recorder *MockmailServiceMockRecorder
}

// MockmailServiceMockRecorder is the mock recorder for MockmailService.
type MockmailServiceMockRecorder struct {
	mock *MockmailService
}

// NewMockmailService creates a new mock instance.
func NewMockmailService(ctrl *gomock.Controller) *MockmailService {
	mock := &MockmailService{ctrl: ctrl}
	mock.recorder = &MockmailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmailService) EXPECT() *MockmailServiceMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockmailService) Send(email, subject, message, fromName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", email, subject, message, fromName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockmailServiceMockRecorder) Send(email, subject, message, fromName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockmailService)(nil).Send), email, subject, message, fromName)
}
